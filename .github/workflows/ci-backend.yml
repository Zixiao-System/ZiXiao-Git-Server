name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'cmd/**'
      - 'internal/**'
      - 'pkg/**'
      - 'git-core/**'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/ci-backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'cmd/**'
      - 'internal/**'
      - 'pkg/**'
      - 'git-core/**'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/ci-backend.yml'

jobs:
  lint-go:
    name: Lint Go Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev

      - name: Build C++ library
        run: make build-cpp

      - name: Install Go linting tools
        run: |
          go install golang.org/x/lint/golint@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run go fmt
        run: |
          fmt_output=$(gofmt -l .)
          if [ -n "$fmt_output" ]; then
            echo "The following files need formatting:"
            echo "$fmt_output"
            exit 1
          fi

      - name: Run go vet
        env:
          CGO_CFLAGS: "-I${{ github.workspace }}/git-core/include"
          CGO_LDFLAGS: "-L${{ github.workspace }}/git-core/lib"
        run: go vet ./...

      - name: Run golint
        env:
          CGO_CFLAGS: "-I${{ github.workspace }}/git-core/include"
          CGO_LDFLAGS: "-L${{ github.workspace }}/git-core/lib"
        run: golint -set_exit_status ./...

      - name: Run staticcheck
        env:
          CGO_CFLAGS: "-I${{ github.workspace }}/git-core/include"
          CGO_LDFLAGS: "-L${{ github.workspace }}/git-core/lib"
        run: staticcheck ./...

  test-go:
    name: Test Go Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev

      - name: Download Go dependencies
        run: go mod download

      - name: Build C++ library
        run: make build-cpp

      - name: Run tests with coverage
        env:
          CGO_CFLAGS: "-I${{ github.workspace }}/git-core/include"
          CGO_LDFLAGS: "-L${{ github.workspace }}/git-core/lib"
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: backend
          name: backend-coverage

  build-cpp:
    name: Build C++ Library
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libssl-dev zlib1g-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl zlib

      - name: Build C++ library
        run: make build-cpp

      - name: Verify library exists
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            ls -lh git-core/lib/libgitcore.so
          else
            ls -lh git-core/lib/libgitcore.dylib
          fi

  build-backend:
    name: Build Go Server
    needs: [lint-go, test-go, build-cpp]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl zlib

      - name: Build project
        env:
          CGO_CFLAGS: "-I${{ github.workspace }}/git-core/include"
          CGO_LDFLAGS: "-L${{ github.workspace }}/git-core/lib"
        run: make build

      - name: Test server startup
        run: |
          mkdir -p data/repositories logs
          timeout 5s ./bin/zixiao-git-server -config ./configs/server.yaml || [ $? -eq 124 ]

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: zixiao-git-server-${{ matrix.os }}
          path: bin/zixiao-git-server
          retention-days: 7
